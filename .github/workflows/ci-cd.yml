name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: "9.0.x"

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test Suite

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore dependencies
        run: dotnet restore server/riva-test.sln

      - name: 🏗️ Build solution
        run: dotnet build server/riva-test.sln --no-restore --configuration Release

      - name: 🐳 Start test database
        run: |
          echo "🚀 Starting test database container..."
          docker-compose -f docker-compose.test.yml up -d test-db

      - name: ⏳ Wait for database
        run: |
          echo "⏳ Waiting for SQL Server to be ready..."
          timeout=90
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q "SELECT 1" > /dev/null 2>&1; then
              echo "✅ Database is ready!"
              break
            fi
            echo "💭 Still waiting... (${elapsed}s/${timeout}s)"
            sleep 3
            elapsed=$((elapsed + 3))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "❌ Database failed to start within ${timeout} seconds"
            echo "📋 Container logs:"
            docker logs sqlserver-test
            echo "📋 Container status:"
            docker ps -a
            exit 1
          fi

      - name: 📊 Initialize test database
        run: |
          echo "📊 Setting up test database schema and data..."
          docker-compose -f docker-compose.test.yml up test-db-init

          # Verify database initialization
          echo "🔍 Verifying database setup..."
          docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -d ContactManagerTest -Q "SELECT COUNT(*) FROM Contacts"

      - name: 🔬 Run Unit Tests
        run: |
          cd server
          echo "🔬 Running unit tests..."
          dotnet test ContactManager.Tests \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger trx \
            --results-directory TestResults \
            --collect:"XPlat Code Coverage"

      - name: 🧪 Run Integration Tests
        run: |
          cd server
          echo "🧪 Running integration tests..."
          dotnet test ContactManager.IntegrationTests \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger trx \
            --results-directory TestResults \
            --collect:"XPlat Code Coverage"

      - name: 📊 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 📋 .NET Test Results
          path: server/TestResults/*.trx
          reporter: dotnet-trx
          fail-on-error: true

      - name: 📈 Upload Coverage Reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: server/TestResults
          fail_ci_if_error: false

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up test containers..."
          docker-compose -f docker-compose.test.yml down -v

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    name: 🚀 Build & Deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        run: |
          echo "🔑 Logging into Amazon ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} |
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_DOMAIN }}

      - name: 🏗️ Build Docker image
        run: |
          echo "🏗️ Building Docker image..."
          docker build -t contactmanager -f server/Dockerfile server
          docker tag contactmanager:latest ${{ secrets.ECR_REPO }}:latest
          docker tag contactmanager:latest ${{ secrets.ECR_REPO }}:${{ github.sha }}

      - name: 📤 Push Docker image
        run: |
          echo "📤 Pushing Docker image to ECR..."
          docker push ${{ secrets.ECR_REPO }}:latest
          docker push ${{ secrets.ECR_REPO }}:${{ github.sha }}

      - name: 🚀 Deploy to ECS
        run: |
          echo "🚀 Deploying to ECS Fargate..."
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment

          echo "✅ Deployment initiated!"
          echo "🔗 Check deployment status in AWS ECS Console"

  frontend-deploy:
    runs-on: ubuntu-latest
    needs: test
    name: 🌐 Deploy Frontend
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: client/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd client
          npm ci

      - name: 🏗️ Build frontend
        run: |
          cd client
          npm run build

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🌐 Deploy to AWS Amplify
        run: |
          echo "🌐 Deploying frontend to AWS Amplify..."
          # This would typically be handled by Amplify's GitHub integration
          # or you could use AWS CLI commands to deploy to S3 + CloudFront
          echo "✅ Frontend deployment triggered!"
