name: Deploy to ECS Fargate

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Integration Tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Restore .NET dependencies
        run: dotnet restore server/riva-test.sln

      - name: Start test database
        run: |
          docker-compose -f docker-compose.test.yml up -d test-db

      - name: Wait for database to be ready
        run: |
          echo "Waiting for SQL Server to be ready..."
          timeout=60
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if docker exec sqlserver-test /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q "SELECT 1" > /dev/null 2>&1; then
              echo "✅ Database is ready!"
              break
            fi
            sleep 2
            elapsed=$((elapsed + 2))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "❌ Database failed to start within ${timeout} seconds"
            docker logs sqlserver-test
            exit 1
          fi

      - name: Initialize test database
        run: |
          docker-compose -f docker-compose.test.yml up test-db-init

      - name: Run unit tests
        run: |
          cd server
          dotnet test ContactManager.Tests --verbosity normal --logger trx --results-directory TestResults

      - name: Run integration tests
        run: |
          cd server
          dotnet test ContactManager.IntegrationTests --verbosity normal --logger trx --results-directory TestResults

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: .NET Tests
          path: server/TestResults/*.trx
          reporter: dotnet-trx

      - name: Cleanup test containers
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Deploy to AWS ECS
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} |
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_DOMAIN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPO }} -f server/Dockerfile server
          docker tag contactmanager:latest ${{ secrets.ECR_REPO }}:latest

      - name: Push Docker image
        run: |
          docker push ${{ secrets.ECR_REPO }}:latest

      - name: Force ECS redeploy
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment
